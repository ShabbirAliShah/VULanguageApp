package com.example.vulanguageapp.fragments;


import static androidx.media3.exoplayer.mediacodec.MediaCodecInfo.TAG;

import android.icu.text.SimpleDateFormat;
import android.os.Bundle;

import androidx.annotation.NonNull;
import androidx.core.net.ParseException;
import androidx.fragment.app.Fragment;

import android.util.Log;
import android.view.LayoutInflater;
import android.view.TextureView;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import android.widget.Toast;

import com.bumptech.glide.Glide;
import com.example.vulanguageapp.R;
import com.example.vulanguageapp.databinding.FragmentUserProfileBinding;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ValueEventListener;

import java.util.Date;
import java.util.Locale;
import java.util.concurrent.TimeUnit;

public class UserProfileFragment extends Fragment {

    private FirebaseDatabase database;
    private DatabaseReference databaseReference, quizQuestionsRef, quizResultsRef;
    private int completedTrueCount;
    private int completedFalseCount;

    private FragmentUserProfileBinding binding; // Use View Binding

    public UserProfileFragment() {
        // Required empty public constructor
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        // Initialize Firebase Realtime Database
        database = FirebaseDatabase.getInstance();
        databaseReference = database.getReference("enrollments");

        // Firebase references
        quizQuestionsRef = FirebaseDatabase.getInstance().getReference("quizQuestions");
        quizResultsRef = FirebaseDatabase.getInstance().getReference("quizResults");
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        // Initialize View Binding
        binding = FragmentUserProfileBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }

    @Override
    public void onViewCreated(@NonNull View view, Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

       ImageView imageView = binding.profileImage;

        String imageUrl = "https://images.pexels.com/photos/789141/pexels-photo-789141.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2";
        Glide.with(this) // or `requireContext()` if inside a Fragment
                .load(imageUrl)
                .placeholder(R.drawable.baseline_face_24) // Optional: placeholder image
                .error(R.drawable.ic_quiz)            // Optional: error image
                .into(imageView);


        // Use binding to access views
        binding.completedLessons.setText("0"); // Set initial values if needed
        binding.quizSummaryTextView.setText("Loading...");

        // Perform data-fetching operations
        lessonCounter();
        fetchQuizCounts();
        countBadgeEarned();
    }

//    public void lessonCounter() {
//        databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {
//            @Override
//            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
//                completedTrueCount = 0;
//                completedFalseCount = 0;
//
//                // Loop through each autogenerated ID under "enrollments"
//                for (DataSnapshot dataSnapshot1 : dataSnapshot.getChildren()) {
//                    DataSnapshot selectedLessonsSnapshot = dataSnapshot1.child("selectedLessons");
//
//                    // Loop through each lesson ID under "selectedLessons"
//                    for (DataSnapshot lessonSnapshot : selectedLessonsSnapshot.getChildren()) {
//                        Boolean completed = lessonSnapshot.child("completed").getValue(Boolean.class);
//
//                        // Count completed values
//                        if (completed != null) {
//                            if (completed) {
//                                completedTrueCount++;
//                            } else {
//                                completedFalseCount++;
//                            }
//                        }
//                    }
//                }
//
//                // Update counts in TextViews using binding
//                binding.completedLessons.setText(String.valueOf(completedTrueCount + "/" + completedTrueCount + completedFalseCount));
//            }
//
//            @Override
//            public void onCancelled(@NonNull DatabaseError databaseError) {
//                Log.e("FirebaseError", "Error reading data", databaseError.toException());
//            }
//        });
//    }

    public void lessonCounter() {

        String courseId = "-O7lnqcOMSngRJ-QKEQd";
        // Reference to "user1" node (replace "user1" with dynamic user ID if needed)
        DatabaseReference userRef = database.getReference("enrollments").child(courseId);

        userRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                // Initialize counts
                int completedCount = 0;
                int totalCount = 0;

                // Get enrollment date
                String enrollmentDateStr = dataSnapshot.child("enrollmentDate").getValue(String.class);

                // Calculate days since enrollment
                long daysSinceEnrollment = calculateDaysSince(enrollmentDateStr);

                // Iterate over "selectedLessons"
                DataSnapshot selectedLessonsSnapshot = dataSnapshot.child("selectedLessons");
                for (DataSnapshot lessonSnapshot : selectedLessonsSnapshot.getChildren()) {
                    boolean isCompleted = lessonSnapshot.child("completed").getValue(Boolean.class) != null &&
                            lessonSnapshot.child("completed").getValue(Boolean.class);

                    totalCount++; // Increment total lessons
                    if (isCompleted) {
                        completedCount++; // Increment completed lessons
                    }
                }

                // Update TextViews
                binding.completedLessons.setText(completedCount + " / " + totalCount);
                binding.completedDays.setText(String.valueOf(daysSinceEnrollment));
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Log.e("FirebaseError", "Error reading data: ", databaseError.toException());
            }
        });
    }

    private long calculateDaysSince(String dateStr) {
        if (dateStr == null || dateStr.isEmpty()) {
            return -1; // Return -1 if the date is invalid
        }

        SimpleDateFormat sdf = new SimpleDateFormat("dd/MM/yyyy", Locale.getDefault());
        try {
            Date enrollmentDate = sdf.parse(dateStr);
            Date currentDate = new Date();

            // Calculate the difference in milliseconds and convert to days
            long diffInMillis = currentDate.getTime() - enrollmentDate.getTime();
            return TimeUnit.MILLISECONDS.toDays(diffInMillis);
        } catch (ParseException e) {
            Log.e("DateError", "Error parsing date: " + dateStr, e);
            return -1; // Return -1 if parsing fails

        } catch (java.text.ParseException e) {
            throw new RuntimeException(e);
        }
    }



    private void fetchQuizCounts() {
        // Count total quizzes
        quizQuestionsRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot snapshot) {
                long totalQuizzes = snapshot.getChildrenCount();

                // Count attempted quizzes
                quizResultsRef.addListenerForSingleValueEvent(new ValueEventListener() {
                    @Override
                    public void onDataChange(@NonNull DataSnapshot snapshot) {
                        long attemptedQuizzes = snapshot.getChildrenCount();

                        // Update the TextView using binding
                        binding.quizSummaryTextView.setText(attemptedQuizzes + " / " + totalQuizzes);
                    }

                    @Override
                    public void onCancelled(@NonNull DatabaseError error) {
                        binding.quizSummaryTextView.setText("Error loading attempted quizzes");
                    }
                });
            }

            @Override
            public void onCancelled(@NonNull DatabaseError error) {
                binding.quizSummaryTextView.setText("Error loading total quizzes");
            }
        });
    }

    public void countBadgeEarned() {
        String userId = "z0G7MMzW94aCGN8oSkJlvFEUTww1";
        // Reference to the user node
        DatabaseReference userRef = database.getReference("users").child(userId).child("badges").child("courseIdasKey");

        userRef.addListenerForSingleValueEvent(new ValueEventListener() {
            @Override
            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {
                // Count the number of entries inside keycoursekey
                long entryCount = dataSnapshot.getChildrenCount();

                // Update the badgeEarned TextView
                binding.badgeEarned.setText(String.valueOf(entryCount));
            }

            @Override
            public void onCancelled(@NonNull DatabaseError databaseError) {
                Log.e("FirebaseError", "Error reading data: ", databaseError.toException());
            }
        });
    }
}
